20210104 stud summary

ppt---------------------------------
실습--------------------------------
강사txt-----------------------------



강사txt-----------------------------
HTTP 프로토콜의 특징
1. 비연결성
 - 요청을 보내고 응답을 받게 되면 서버와의 연결은 끊어 진다.
 - 서버로 재요청시 서버는 클라이언트가 누구인지 알수 있도록 session과 cookie를 이용
 
2. 웹브라우저는 서버로 요청시 해당 서버(도메인)에 설정된 쿠키 값을 항상 같이 전송한다
 - 서버 또는 클라이언트가 누구인지 식별할때 사용
 - cookie : 브라우저에 저장되는 정보/브라우저의 로컬 저장소 경로에 저장된다
 
 3. java 기반 서버는 요청을 받게 되면 해당 요청의 쿠키정보중에 JSESSIONID라는 쿠키가 있는지 확인한다
 	JSESSION쿠키가 없을 셩우 : 서버는 신규 접속이 요청이라고 판단, SESSION을 새롭게 만들고 생성할 떄
 	SESSION ID(JSESSIONID)를 응답 헤더에 포함하고
 	해당 응답을 받은 브라우저 JSESIONID 쿠키 값을 브라우저에 저장한다
 	
 	JSESIONID 쿠키가 있을경우 
 	 JSESIONID에 해당하는 SESIION을 사용(기존 접속한 사용자로 인식)
 	
웹에서 사용자(client)란? 웹브라우저
동일한 인물?(x) [타 브라우저를 사용하여도 세션의 id는 다르며 이로 동일한 인물이 아닐수도있다]

cookie 길찾기 >> 헨젤과 그레텔의 동화 이야기

ppt---------------------------------
*스코프의 종류 및 특성 
[
\표
스코프  /설명 /jsp/servlet
page/jsp페이지내에서만 공유되는 영역/pageContext/na
request/클라이언트의 요청정보가 유지되는 동안 공유되는 영역(dispatch)/request/request
session/클라이언트의 정보가 유지되는동안 공유되는 영역/session/request.getSession()
application/웹 어플리케이션 내에서 공유 되는 객체의 영역/application/getServletContext()
]



강사txt-----------------------------
속성 : 요청을 처리하는 과정에서 servlet/jsp 사이에서 공유하는 정보
scope : 속성을 담을수 있는 영역, 객체

scope 객체
page(pageContext) : 해당 jsp 페이지 내에서면 유효한 공간 (java의 block 안에 선언된 지역변수)
request(HttpServletRequest) : 요청이 처리될 때 까지만 유효한 공간 (java의 지역변수)
session(httpSession) : 세션이 유효한 동안만 유지되는 공간 (java의 인스턴스 객체)
application(servletContext) : 웹 어플리케이션에서 하나만 유지되는 공간 (java의 static 변수)


강사txt-----------------------------
scope 객체 실습-----------------------------

웹브라우저로 다음 주소에 접속 : localhost/scope(GET)
해당 요청을 처리해줄 servlet 생성 kr.or.ddit.servlet.scope.scope.java
GET요청에 대해서는 화면을 webapp/jsp/scope.jsp로 응답 생성 위임

scope.jsp 에는 하나의 input태그(name-scope) 와 submit 버튼 생성
전송 메소드는 POST, 전송 주소는 /scope

Scope.java의 doPost에서는 요청 파라미터중 scope 파라미터를 확인하여
request, session, application scope에 다음과 같이 속성을 저장
>>
request : 속성명 = request, 속성값 =scope파라미터값 + "_request"
session : 속성명 = session, 속성값 =scope파라미터값 + "_session"
application : 속성명 = application, 속성값 =scope파라미터값 + "_application"

속성 설정이 끝나면 webapp/jsp/scopeResult.jsp로 forward
scopeResult.jsp 에서는 Scope servlet에서 설정한 3개의 속성을
속성명 : 속성값
속성명 : 속성값
속성명 : 속성값 형식으로 화면에 출력


scope 객체의 속성관련 메소드
속성 조회 : 스코프 객체.getAttribute("속성명"), 반환타입 : Object
			*** 비교 getParameter("파라미터명"), 반환타입 ; String
속성 저장 : 스코프 객체.setAttribute("속성명", "속성값"), 반환타입 : void
속성 삭제 : 스코프 객체.removeAttribute("속성명"), 반환타입 : void
속성 이름 검색 : 스코프 객체 : getAttributeNames(),, 

테스트
1>> 최초 접속
1.localhost/scope 접속
2.input tag에 값입력후 전송 버튼 클릭  >>. qweqwe123123
3. 결과 확인
request : qweqwe123123_request
session : qweqwe123123_session
application : qweqwe123123_application


2>> 1번과 같은 브라우저를 사용하여 접속시
localhost/jsp/scopeResult.jsp 바로 접속시
결과
request : null
session : qweqwe123123_session
application : qweqwe123123_application

3>> 1번과 다른 브라우저를 사용하여 접속시
localhost/jsp/scopeResult.jsp 바로 접속시
결과
request : null
session : null
application : qweqwe123123_application

4>> 3번과 동일한 브라우저를 사용하여
localhost/scope 접속
input 태그에 sally 값을 입력후 전송
결과
request : sally_request
session : sally_session
application : sally_application

5>> 1번과 동일한 브라우저를 하용하여
localhost/jsp/scopeResult.jsp 바로 접속
request : null
session : qweqwe123123_session
application : sally_application


scope 객체 실습끝-----------------------------



ppt 강사 문제 객체 실습-----------------------------

*localhost / CONTEXT-PATH / sumCalculation 
*get(화면 요청)
-start, end parameter를 입력 / 전송 할 수 있도록 화면 구성 (input, form tag 사용)
-sumCalculation servlet으로 요청
-(사용자가 start 값을 end보다 작은 값을 넣는다 고 가정)
*post (결과 처리)
-logger로 start 파라미터와 end 파라미터 사이의 값을 합으로 계산 후 출력 
-start와 end 사이의 값을 더하여 session에 "sumResult"키로 저장
-sumResult.jsp로 dispatch forward
-session에 저장된 sumResult 값을 화면에 출력
