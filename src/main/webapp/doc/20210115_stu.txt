20210115 stud summary

ppt---------------------------------
실습--------------------------------
강사txt-----------------------------


강사txt-----------------------------
model1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
		비지니스 로직(model)이 jsp(view)안에서 호출됨
		만약 다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용할경우
		비지니스 로직의 변경시 많은 코드 수정이 동반된다 ==> 유지보수의 어려움

model2 : 요청을 JSP, SERVLET, 로직을 위한 클래스로 나뉘어 브라우저 요청을 처리.
즉.
모델은 서비시크 클래스 또는 자바빈
뷰는 JSP
컨트롤러는 서블릿

MVC 패턴 : MODEL -VIEWQ - CONTROLLER
		각 역할을 담당하는 객체를 분리
		CONTROLLER : 요청을 접수, 비지니스 로직을 호출 및 저장(scope)
		MODEL : 비지니스 로직처리
		VIEW : 화면 출력 저장
		
		model1과 다르게 VIEW 와 MODEL을 분리
		VIEW에서 필요한 데이터는 SCOPE 객체를 통해 받는다
		
Front Controller : 모든 요청을 하나의 객체가 접수 받는 형태
			장점 : 관리, 유지보수, 
					하나의 컨트롤러를 통해서 관리가 되므로 디버그/테스트/보안 을 
					적용 또는 구현을 편하게 가능하다. 또한 Url 구성이 간편하다 
