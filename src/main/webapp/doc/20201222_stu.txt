20201222 웹기반애플리케이션
개발환경 구축
웹아키텍쳐 >>웹구조
JSP / SERVLET / SPRING / SPRING BOOT(부트만 비공식교육과정)
배치
래퍼런스(인터넷, spring.io) 참고하여 spring framework bean관리, aop를 통한 트랜젝션, MVC, ORM(mybatis)) 연동 설정.

- 게시판 작성을 8시간 이내에 완성 해보기.

--------------------------------------------------------------------------------------------------------------------------

*ojdbc 
현재까지는 이클립스상에서만 세팅을 했으나. 실무에서 사용가능한 부분으로 세팅을 할 예정.


*전산 서버 환경
presentation 사용자 인터페이스 화면
Business logic 업무처리 로직
DAta(access Logic) : data 저장/접근 or database server

*1-tier >>> client/server (시스템내 클라이언트와 서버 모듈이 공존) >> 확장이 어렵다

*2-tier >>> 전용 클라이언트 프로그램 속도가 빠르다 (병원진료, 차트프로그램)
DB 만 공유하고 UI, Business 로직은 클라이언트에 탑재
Client간 통신이 어려움 / 보안문제

*3-tier >>> 전용 클라이언트 프로그램 (속도가 빠르다) 온라인게임
서버를 통해 클라이언트간 통신가능 (Business logic)
클라이언트 프로그램의 배포 문제

--------------------------------------------------------------------------------------------------------------------------

client 프로그램 미업데이트 문제
서로다른버전에 의한 로직제어 문제
미업데이트시 서비스 이용불가 문제
프로그램업데이트로 인한 배포문제
>>> client수 만큼 배포가 이루어져야한다.

--------------------------------------------------------------------------------------------------------------------------

*서버구조와 웹구조 비교
클라이언트/서버 >>> 웹 구조
전용 클라이언트프로그램 >>> 웹브라우저
클라이언트 >>> 화면제어(javascript)
서버 >>> 비지니스 로직제어 (jsp, mvc framework)
업데이트 된 부분은 ‘서버에만 배포’

--------------------------------------------------------------------------------------------------------------------------

*웹구조 제한사항
브라우저 기능에 의존 >>> 제한적인 UI(FLEX, FLASH)
브라우저 기능을 벗어나는 추가기능사용시 호환성/ 보안성 문제(ACTIVE X)
모든 브라우저가 동일한 기능 제공하지 않음(브라우저별 호환성, Cross Browsing)
같은 브라우저 버전별 호환 문제

--------------------------------------------------------------------------------------------------------------------------

Cs >>> Client Server 배포대상. 클라이언트와 서버
web architecture  >>> 웹구조 배포대상. 서버

--------------------------------------------------------------------------------------------------------------------------

웹서버- 클라이언트의 요청을 받아서 결과를 전송 / 정적 자원처리에 최적화 (html,css, js, image)

웹애플리케이션 서버- 로직에 의한 동적 컨텐츠를 생성 웹브라우저에 전달/ 웹서버의 역할을 겸함(톰캣)

--------------------------------------------------------------------------------------------------------------------------

RAC (Real Application Cluster)
node(=슬래이브)

--------------------------------------------------------------------------------------------------------------------------

크롬>톰캣>오라클

--------------------------------------------------------------------------------------------------------------------------

**클라이언트서버 웹구조비교
**웹구조 장접
**앞으로 개발시 필요한 환경- 이클립스,톰캣,오라클
**형상관리의 필요성과 이해

--------------------------------------------------------------------------------------------------------------------------

was 웹 서버방식
thread
main

--------------------------------------------------------------------------------------------------------------------------

URL 웹과 구성요소

http  80
https 443

--------------------------------------------------------------------------------------------------------------------------

servelt- 자바코드안에 HTML
JSP- html 문서 안에 자바코드

--------------------------------------------------------------------------------------------------------------------------

**웹의 탄생배경
**URL을 통한 웨서버에 요청/응답과저
**자바기반의 웹 프로그램밍 개요(servelt/jsp)

--------------------------------------------------------------------------------------------------------------------------

server program + let(작다를 뜻하는 접미어) : 작은 서버 프로그램
applet : application + let : 작은 응용 프로그램



WAS,
Web Application Server == web container == servlet container.
>>> web Container




Web Application Server == web container == servlet container.
>>> web Container


WAS, (jboss, IBM 웹스피어)
servlet Container + EJB Container 
servlet Container []


MIME 전자우편을 위한 인터넷 표준 포맷
MIME Multipurpose Internet Mail Extensions
SMTP Simple Mail Transfer Protocol

영어가 아닌 외국어 특수기호 이미지 파일 전송을 위해서 ㅡ 인코딩이 필요 MIME
HTTP에서도 차용

Content-Type(MIME-type)
text/plain
text/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
application/octet-stream
multipart/form-data
multipart/byteranges

국제인터넷주소관리기구
Internet Corporation for Assigned Names and Numbers, ICANN

-클래스 생성
-위치지정
WEBINF 파일은 그대로


--------------------------------------------------------------------------------------------------------------------------
-개발 환경 구축
개발 환경 구축
개발 환경 구축
개발 환경 구축

개발 환경 구축
웹접속
https://spring.io/

https://spring.io/tools



다운파일 압축 풀기
압축파일내 contents 압축 풀기

contents 
\contents\sts-4.9.0.RELEASE\SpringToolSuite4.exe 실행








*maven project
Group id : 해당 프로젝트를 진행하는 회사에 대한 정보
 회사의 도메인 역순으로 기술
naver.com ==> moc.revan
==>com.naver
google.com ⇒ com.google

*Artifact id ; Group id에 대항하는 회사에서 진행하는 프로젝트명
 google : GMAIL,GOOGLEDRIVE

*version : 프로젝트의 버전 
	대.중.소 3.5.2.


*jar / Java Archive 클래스들을 묶어 놓은 파일 압축파일

class, html, jsp, image, css, javascript
*war : Web Archive : 웹프로그램을 묶어 놓은 파일
tomcat의 web apps 폴어데 war 파일을 복사해놓고 톰캣을 기동하면 war파일을 톰캣이 자동으로 압축을 해제하여 웹 어플리케이션이 서비스 되도록 한다.










버리고 다시












error fixed





이클립스 환경 설정1

환경설정 - Java - Code Style - Code templete - comments: types
**
 * ${file_name}
 *
 * @author ${user}
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 * 수정자 수정내용
 * ------ ------------------------
 * ${user} 최초 생성
 *
 * </pre>
 */

--------------------------------------------------------------------------------------------------------------------------


환경설정 - Java - Code Style - Code templete - comments: methods / Overridng

/** * Method : ${enclosing_method} 
* 작성자 : ${user} 
* 변경이력 : 
* ${tags} 
* Method 설명 : 
*/

--------------------------------------------------------------------------------------------------------------------------
환경설정 - Java - Editor - Templates - New

/***Given***/

/***When***/

/***Then***/

커서추가










환경설정 - Java - Editor -(template) New


${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}private static final Logger logger = LoggerFactory.getLogger(${enclosing_type}.class); 





//////////////////////////

pom :  project object Model - 프로젝트에 대한 설정 정보 해당 프로젝트를 만든 회사
프로젝트 이름
프로젝트의 버전
프로젝트에서 필요로 하는 의존성 (dependency) - 라이브러리 (ojdbc6.jar)


//////////////////


