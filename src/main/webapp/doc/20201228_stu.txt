20201228 stud summary


System.out.println(앞으로 사용 금지)

logging 사용 이유 : 개발시 의도한대로 동작하고 있는지 검사
ex : 웹브라우저를 통해 server로 요청(localhost/basicServlet)
	doGet 메소드가 호출이 되었는지 로그를 통해 확인
	
	파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인
	
logging과 비슷한 목적으로 사용하는 것 : 디버깅


ppt-----------------------------------------
개발시에는 상세한 로깅이 필요함.
운영환경에서는 에러 메시지만 필요

ppt-----------------------------------------
system class 화면. sysout/ println/ 각 메소드 화면. 스샷 화면 ppt
println 시 동기화 >> 동시에 접선을 불가능 하게함(동시에 접선이 불가능이 필요).
ex: 게임의 동시접속시 혼자 사용시 동기화.. 다만 서버가 몰릴시 에러 발생 가능성

ppt-----------------------------------------
필요한 로그만 보고싶다면
-개발시 작성한 로그 삭제 필요
-삭제후 다시 필요하면 다시 작성 및 완료되면 다시 삭제.

synchronized/ java IO(blocing/NIO(non blocking))
중요한 로그는 console, file, mail.로 전송이 가능

ppt-----------------------------------------
logger 로그를 작성하여 appender에게 전달.
클래스명/등으로 logger 선언
최상위 > root logger

BLBoard-----------------------------------------
*Simple Logging Facade for Java (SLF4J)
1세대 log4j : 문제점 > 호환성

배포 관련.
clean 
default
site

*Maven Lifecycle
주요 페이즈
clean : 이전 빌드에서 생성된 모든 파일을 삭제한다.
/////
compile : 프로젝트의 소스코드를 컴파일한다.
test : 테스트코드를 수행한다.
package : 컴파일된 소스를 jar, war등 정해진 포맷에 따라 패키징한다.
install : dependcy가 있는 다른 프로젝트에서 사용하기 위해 본인의 로컬 저장소(PC)에 설치한다.
deploy : 다른 개발자나 프로젝트에서 참조하기 위해 원격 저장소에 배포한다.
/////
site : 프로젝트의 site 문서를 생성한다.
site-deploy : site 문서를 web sever에 배포한다.

